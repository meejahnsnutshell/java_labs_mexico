
1) What is a lambda expression?

- An unnamed method that is used to implement a method defined by a functional interface

2) What is the general form of a lambda expression?

// no parameters:
() ->

// a parameter:
(n) ->

3) What is a functional interface?

an interface that contains only one abstract method, a lambda will define the body of the method
if it's class implements the interface

4) Write a lambda expression that uses the following functional interface:

    interface SomeInterface {
        boolean validate(int a, int b);
    }

    // write lambda here as though it were in another class

SomeInterface var = (n, m) -> {
    if(n == m){
        return true;
    }
    return false;
    };

5) Write a lambda expression that uses the following functional interface:

    interface GenericTest {
        boolean run(T a, T b);
    }

    // write lambda here as though it were in another class

GenericTest gt = (Integer a, Integer b) -> {
    if(a == b){
        return true;
    }
    return false;
    };

6) Analyze and run the LambdaSpeedDemo.java file in the part_12 package. Understand the
similarities between lambda expressions and anonymous inner classes as well as interfaces
(and interface implementations). Run this application and take a look at the results.
Change the number of loops for each test and see what happens.
Which implementation is fastest? How did the lambda do?

7) What is variable capture?
- refers to when a lambda expression uses a variable from its enclosing scope, it can only use
those that are final (but aren't necessarily declared as final).
-aka a lambda expression can use/access variables of its class, but can't modify them.

8) How do you throw an exception from within a lambda expression?
 the abstract method signature in the functional interface must include "throws" in its
 signature:

 interface MyIOAction {
 boolean ioAction(Reader rdr) throws IOException;
 }

