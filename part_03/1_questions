
Answer the following questions


1) What is an instance variable?
a variable that describes the class itself and is declared at the class level before any method

other variables within methods are "local"

2) How do you create a new object?

ClassName variableNameObj = new ClassName();
ex:
Car andreaCar = new Car();

3) After creating a new object, how do you set that objects instance variables?

    #1) objectName.variableNameObj = value;
        ex:
        andreaCar.color = "blue";
    #2) use a setter method
        ex:
        andreaCar.setColor("blue");

4) What is a reference variable? Why do you need to be careful with reference variables?

a reference variable is an object. When you pass an object (from methodA) to another
method (methodB) as an argument, methodB does not get it's own copy of the object, it gets
a reference to object. In this case the object in both methodA and methodB are pointing to the
same exact place/object in memory. Any change that happens to the object (reference variable)
in methodB will carry over to the object in methodA regardless of whether or not methodB returns
that object to methodA.

ex:

methodA(){
int a = 10;
int b = 20;
methodB(a,b); // this jumps to methodB and performs tasks within it, but does not pass those
sout (a + " " + b); //new a-b values BACK to method A, they stay in method B, so this will print
                    // 10 20
}

methodB(int a, int b)){
a = a * 1,000,000,000; //a = 10 from methodA
b = a/2;                //b = 20 from methodA
sout (a + " " + b);  //this prints 10,000,000,000 5,000,000,000


5) How many methods can you have in a class?
as many as you like, is limited by largest int which is like 2 billion

6) How do you exit a method at any point?
    -just "return;" if the method doesn't return anything, is "void"
    -returns a value if it is a non-void return type
       ex: return a * b;

7) What is the method signature (or declaration) required to return an "int" from a method?
(int has to be in the method signature)

public int methodName(<optional args>){
    ...
}

ex:

    public int multiply(int a, int b){...}
    -this method takes two arguments as parameters and returns an int which is the result of
    multiplying the two parameters

8) Assuming "int num = 10", what is the syntax to return "num" from a method?

int methodName(){

    int num = 10;
    return num;
}

9) How do you pass a parameter to a method?
    - you don't necessarily need an object to do this (static methods are non-object oriented)

    - you pass parameters to methods that require parameters in the parenthesis
    - ie, int x = objectName.mulitply(10, 20);
    - 10 and 20 are parameters being passed to the multiply method

10) What is the method signature for a method named sum() that takes two int parameters
    and returns their sum as in int?

public int sum(int x, int y){}
int x = sum(8,9);

}

11) What is a constructor?

Is used to initialize instance variables, has the same name as its class, it initializes an
object when created

12) How does Java treat a class without a constructor?

It creates a default constructor that assigns default values (empty)

13) What would the constructor for "public class Animal" look like?
(they should usually be public)

public class Animal {
    String name;
    int age;

    Animal(){

        name = "Zebra";
        age = 5;

    }
}

14) What is the effect of passing parameters to a constructor?

it can automatically initialize instance variables
ex on pg 126
objects can be created like this:
MyClass t1 = new MyClass(10);
and 10 is assigned to whatever the constructor has specified it's parameters to do.

- class Car{
    String color;   //<- this.color
    String model;   //<- this.model

    Car (String color, String model) { //this is the constructor
    this.color = color;
    this.model = model;
    }
  }

  // then in some other class

  Car myCar = new Car("Yellow", "Mustang");

  // without a parameterized constructor you would have to:
  Car myCar = new Car();
  myCar.color = "Yellow";
  myCar.model = "Mustang";


15) When should you pass parameters to a constructor?

- if the constructor requires parameters
- if you're writing the constructor and you want to be able to set the instance variables in the
    constructor or set other variables or do some other task as soon as the object is created
- Car myCar = new Car("Yellow", "Mustang");

16) What does the finalize() method do? (don't worry about this)

it ensures that an object terminates cleanly, makes sure it gets garbage collected
It's useful for closing connections to open files, network connections, databases etc.

17) What does the "this" keyword do?

- When used in the constructor, it allows you to assign values to instance variables when creating
 an object
- can think of it as "pertaining to this instance"

18) When should you use the "this" keyword?

- usually in the constructor, when you have a name conflict between the instance variable
(ex color) and the constructor parameter (ex color).

if you have a class variable and a method variable with the same name (like the constructor?) <-yes

19) Write an example of the "this" keyword in action.

- see # 14

20) Explain static vs non static vars.
Ryan's notes:

Explain the difference between static and non-static variables.
    - a static variable is shared by all instances of a class - for instance "numCarsCreated" - if
    that's a static variable - each and every object created from Car class has shared access to that
    variable - if that variable currently holds "4" - each and every object created from the Car class
    can tell you that that variable currently holds "4". Static variables are shared across all
    instances of a class - no matter how many objects/instances you create of that class.

    - a non static variable belongs to the instance/object - for instance birthday is great example
    of a non-static variable - because each instance/object of the Person class should have their own
    copy of that variable that they can modify and change accordingly based on their individual birthday.
    Phone number, POBOX, street address, email address - these are all non-static variables that should not
    be shared across every instance/object of the Person class that has been created

*Static variables* are variable shared by all instances of a class

all objects share the same static variable (and it's value is the same for all)
Instance variables probably shouldn't be static, because you'll probably want to use those within
other objects (like the car example, where each object represented a different person's car,
and they are all different colors, but the variable is the same, everyone has access to it)

ex: String color; (this is not static) (other examples: birthday, address, things that are
    instance/object specific) they should not be shared among all instances of a class

ex: static int numCreated; (this is static)

21)

*Static methods*

static & non-static
A non static method can only be accessed (from another class) by creating an object of the class
containing the non-static method and using that object to call the non-static method. For instance,
assume the car class has a non static method called accelerate().
    Car myNewCar = new Car();
    myNewCar.accelerate(); //using the object "myNewCar" to invoke the method accelerate
    // objectName.methodName();

A static method is required when you need to call a method inside a class before an object of that
class has been or can be created. For instance the main() method. The JVM doesn't create a
new object of your class to call the main() method. It simply calls it using ClassName.main();

non-static to non-static: you can just call the method directly

it's safe to default to creating an object in order to call a method, because most methods will be
non static except the main


Note:
a constructor is a method and is the only method allowed to begin with a capital letter

pass by value: all primitive types are pass by value, if you pass an integer to a method, it changes within the
method but not outside it
    when you pass between methods, the second method gets it's own copy, which doesn't affect the value in the
    first method. If it's returned

pass by reference:
two methods point to the same object (in memory)

continue: forces an early iteration of the loop, loop keeps going

break: breaks out of nearest loop

return: exits the current method

